{"/home/travis/build/npmtest/node-npmtest-handlebars-helpers/test.js":"/* istanbul instrument in package npmtest_handlebars_helpers */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-handlebars-helpers/lib.npmtest_handlebars_helpers.js":"/* istanbul instrument in package npmtest_handlebars_helpers */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_handlebars_helpers = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_handlebars_helpers = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-handlebars-helpers/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-handlebars-helpers && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_handlebars_helpers */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_handlebars_helpers\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_handlebars_helpers.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_handlebars_helpers.rollup.js'] =\n            local.assetsDict['/assets.npmtest_handlebars_helpers.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_handlebars_helpers.__dirname + '/lib.npmtest_handlebars_helpers.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-handlebars-helpers/node_modules/handlebars-helpers/index.js":"/*!\n * handlebars-helpers <https://github.com/assemble/handlebars-helpers>\n *\n * Copyright (c) 2013-2016 Jon Schlinkert, Brian Woodward.\n * Licensed under the MIT license.\n */\n\n'use strict';\n\nvar forIn = require('for-in');\nvar define = require('define-property');\nvar lib = require('./lib/');\n\n/**\n * Expose helpers\n */\n\nmodule.exports = function helpers(groups, options) {\n  if (typeof groups === 'string') {\n    groups = [groups];\n  } else if (!Array.isArray(groups)) {\n    options = groups;\n    groups = null;\n  }\n\n  options = options || {};\n  var hbs = options.handlebars || options.hbs || require('handlebars');\n\n  define(module.exports, 'handlebars', hbs);\n\n  if (groups) {\n    groups.forEach(function(key) {\n      hbs.registerHelper(lib[key]);\n    });\n  } else {\n    forIn(lib, function(group, key) {\n      hbs.registerHelper(group);\n    });\n  }\n  return hbs.helpers;\n};\n\n/**\n * Expose helper groups\n */\n\nforIn(lib, function(group, key) {\n  define(module.exports, key, function(options) {\n    options = options || {};\n    var hbs = options.handlebars || options.hbs || require('handlebars');\n    define(module.exports, 'handlebars', hbs);\n    hbs.registerHelper(group);\n    return hbs.helpers;\n  });\n});\n\n/**\n * Expose `utils`\n */\n\nmodule.exports.utils = require('./lib/utils');\n","/home/travis/build/npmtest/node-npmtest-handlebars-helpers/node_modules/handlebars-helpers/lib/index.js":"'use strict';\n\nmodule.exports = {\n  array: require('./array'),\n  code: require('./code'),\n  collection: require('./collection'),\n  comparison: require('./comparison'),\n  date: require('./date'),\n  fs: require('./fs'),\n  html: require('./html'),\n  i18n: require('./i18n'),\n  inflection: require('./inflection'),\n  logging: require('./logging'),\n  markdown: require('./markdown'),\n  match: require('./match'),\n  math: require('./math'),\n  misc: require('./misc'),\n  number: require('./number'),\n  object: require('./object'),\n  path: require('./path'),\n  string: require('./string'),\n  url: require('./url')\n};\n","/home/travis/build/npmtest/node-npmtest-handlebars-helpers/node_modules/handlebars-helpers/lib/array.js":"'use strict';\n\nvar utils = require('./utils');\n\n/**\n * Expose `helpers`\n */\n\nvar helpers = module.exports;\n\n/**\n * Returns all of the items in an array after the specified index.\n * Opposite of [before](#before).\n *\n * ```handlebars\n * {{after \"['a', 'b', 'c']\" 1}}\n * //=> '[\"c\"]'\n * ```\n *\n * @param {Array} `array` Collection\n * @param {Number} `n` Starting index (number of items to exclude)\n * @return {Array} Array exluding `n` items.\n * @api public\n */\n\nhelpers.after = function(array, n) {\n  if (utils.isUndefined(array)) return '';\n  return array.slice(n);\n};\n\n/**\n * Cast the given `value` to an array.\n *\n * ```handlebars\n * {{arrayify \"foo\"}}\n * //=> '[\"foo\"]'\n * ```\n * @param {any} `value`\n * @return {Array}\n * @api public\n */\n\nhelpers.arrayify = function(value) {\n  return value ? (Array.isArray(value) ? value : [value]) : [];\n};\n\n/**\n * Return all of the items in the collection before the specified\n * count. Opposite of [after](#after).\n *\n * ```handlebars\n * {{before \"['a', 'b', 'c']\" 2}}\n * //=> '[\"a\", \"b\"]'\n * ```\n *\n * @param {Array} `array`\n * @param {Number} `n`\n * @return {Array} Array excluding items after the given number.\n * @api public\n */\n\nhelpers.before = function(array, n) {\n  if (utils.isUndefined(array)) return '';\n  return array.slice(0, -n);\n};\n\n/**\n * ```handlebars\n * {{#eachIndex collection}}\n *   {{item}} is {{index}}\n * {{/eachIndex}}\n * ```\n * @param {Array} `array`\n * @param {Object} `options`\n * @return {String}\n * @block\n * @api public\n */\n\nhelpers.eachIndex = function(array, options) {\n  var result = '';\n  for (var i = 0; i < array.length; i++) {\n    result += options.fn({item: array[i], index: i});\n  }\n  return result;\n};\n\n/**\n * Block helper that filters the given array and renders the block for values that\n * evaluate to `true`, otherwise the inverse block is returned.\n *\n * ```handlebars\n * {{#filter array \"foo\"}}AAA{{else}}BBB{{/filter}}\n * //=> 'BBB\n * ```\n *\n * @name .filter\n * @param {Array} `array`\n * @param {any} `value`\n * @param {Object} `options`\n * @return {String}\n * @block\n * @api public\n */\n\nhelpers.filter = function(array, value, options) {\n  var content = '';\n  var results = [];\n\n  // filter on a specific property\n  var prop = options.hash && options.hash.property;\n  if (prop) {\n    results = utils.filter(array, function(val) {\n      return utils.get(val, prop) === value;\n    });\n  } else {\n\n    // filter on a string value\n    results = utils.filter(array, function(v) {\n      return value === v;\n    });\n  }\n\n  if (results && results.length > 0) {\n    for (var i = 0; i < results.length; i++) {\n      content += options.fn(results[i]);\n    }\n    return content;\n  }\n  return options.inverse(this);\n};\n\n/**\n * Returns the first item, or first `n` items of an array.\n *\n * ```handlebars\n * {{first \"['a', 'b', 'c', 'd', 'e']\" 2}}\n * //=> '[\"a\", \"b\"]'\n * ```\n *\n * @param {Array} `array`\n * @param {Number} `n` Number of items to return, starting at `0`.\n * @return {Array}\n * @api public\n */\n\nhelpers.first = function(array, n) {\n  if (utils.isUndefined(array)) return '';\n  if (!utils.isNumber(n)) {\n    return array[0];\n  }\n  return array.slice(0, n);\n};\n\n/**\n * Iterates over each item in an array and exposes the current item\n * in the array as context to the inner block. In addition to\n * the current array item, the helper exposes the following variables\n * to the inner block:\n *\n * - `index`\n * - `total`\n * - `isFirst`\n * - `isLast`\n *\n * Also, `@index` is exposed as a private variable, and additional\n * private variables may be defined as hash arguments.\n *\n * ```js\n * var accounts = [\n *   {'name': 'John', 'email': 'john@example.com'},\n *   {'name': 'Malcolm', 'email': 'malcolm@example.com'},\n *   {'name': 'David', 'email': 'david@example.com'}\n * ];\n *\n * // example usage\n * // {{#forEach accounts}}\n * //   <a href=\"mailto:{{ email }}\" title=\"Send an email to {{ name }}\">\n * //     {{ name }}\n * //   </a>{{#unless isLast}}, {{/unless}}\n * // {{/forEach}}\n * ```\n * @source <http://stackoverflow.com/questions/13861007>\n * @param {Array} `array`\n * @return {String}\n * @block\n * @api public\n */\n\nhelpers.forEach = function(array, options) {\n  var data = utils.createFrame(options, options.hash);\n  var len = array.length;\n  var buffer = '';\n  var i = -1;\n\n  while (++i < len) {\n    var item = array[i];\n    data.index = i;\n    item.index = i + 1;\n    item.total = len;\n    item.isFirst = i === 0;\n    item.isLast = i === (len - 1);\n    buffer += options.fn(item, {data: data});\n  }\n  return buffer;\n};\n\n/**\n * Block helper that renders the block if an array has the\n * given `value`. Optionally specify an inverse block to render\n * when the array does not have the given value.\n *\n * Given the array `['a', 'b', 'c']`:\n *\n * ```handlebars\n * {{#inArray array \"d\"}}\n *   foo\n * {{else}}\n *   bar\n * {{/inArray}}\n * ```\n *\n * @name .inArray\n * @param {Array} `array`\n * @param {any} `value`\n * @param {Object} `options`\n * @return {String}\n * @block\n * @api public\n */\n\nhelpers.inArray = function(array, value, options) {\n  if (utils.indexOf(array, value) > -1) {\n    return options.fn(this);\n  }\n  return options.inverse(this);\n};\n\n/**\n * Returns true if `value` is an es5 array.\n *\n * ```handlebars\n * {{isArray \"abc\"}}\n * //=> 'false'\n * ```\n *\n * @param {any} `value` The value to test.\n * @return {Boolean}\n * @api public\n */\n\nhelpers.isArray = function(value) {\n  return Array.isArray(value);\n};\n\n/**\n * Join all elements of array into a string, optionally using a\n * given separator.\n *\n * ```handlebars\n * {{join \"['a', 'b', 'c']\"}}\n * //=> 'a, b, c'\n *\n * {{join \"['a', 'b', 'c']\" '-'}}\n * //=> 'a-b-c'\n * ```\n *\n * @param {Array} `array`\n * @param {String} `sep` The separator to use.\n * @return {String}\n * @api public\n */\n\nhelpers.join = function(array, sep) {\n  if (utils.isUndefined(array)) return '';\n  sep = typeof sep !== 'string'\n    ? ', '\n    : sep;\n  return array.join(sep);\n};\n\n/**\n * Returns the last item, or last `n` items of an array.\n * Opposite of [first](#first).\n *\n * ```handlebars\n * {{last \"['a', 'b', 'c', 'd', 'e']\" 2}}\n * //=> '[\"d\", \"e\"]'\n * ```\n * @param {Array} `array`\n * @param {Number} `n` Number of items to return, starting with the last item.\n * @return {Array}\n * @api public\n */\n\nhelpers.last = function(array, n) {\n  if (!utils.isNumber(n)) {\n    return array[array.length - 1];\n  }\n  return array.slice(-n);\n};\n\n/**\n * Block helper that compares the length of the given array to\n * the number passed as the second argument. If the array length\n * is equal to the given `length`, the block is returned,\n * otherwise an inverse block may optionally be returned.\n *\n * @name .lengthEqual\n * @param {Array} `array`\n * @param {Number} `length`\n * @param {Object} `options`\n * @return {String}\n * @block\n * @api public\n */\n\nhelpers.lengthEqual = function(array, length, options) {\n  if (array.length === length) {\n    return options.fn(this);\n  }\n  return options.inverse(this);\n};\n\n/**\n * Returns a new array, created by calling `function`\n * on each element of the given `array`.\n *\n * ```js\n * // register `double` as a helper\n * function double(str) {\n *   return str + str;\n * }\n * // then used like this:\n * // {{map \"['a', 'b', 'c']\" double}}\n * //=> '[\"aa\", \"bb\", \"cc\"]'\n * ```\n *\n * @param {Array} `array`\n * @param {Function} `fn`\n * @return {String}\n * @api public\n */\n\nhelpers.map = function(array, fn) {\n  if (utils.isUndefined(array)) return '';\n  if (typeof array === 'string' && /[[]/.test(array)) {\n    array = utils.tryParse(array) || [];\n  }\n  var len = array.length;\n  var res = new Array(len);\n  var i = -1;\n\n  while (++i < len) {\n    res[i] = fn(array[i], i, array);\n  }\n  return res;\n};\n\n/**\n * Block helper that returns the block if the callback returns true\n * for some value in the given array.\n *\n * ```handlebars\n * {{#some array isString}}\n *   Render me if the array has a string.\n * {{else}}\n *   Render me if it doesn't.\n * {{/some}}\n * ```\n * @name .some\n * @param {Array} `array`\n * @param {Function} `cb` callback function\n * @param {Options} Handlebars provided options object\n * @return {Array}\n * @block\n * @api public\n */\n\nhelpers.some = function(arr, cb, options) {\n  cb = utils.iterator(cb, this);\n  if (arr == null) {\n    return options.inverse(this);\n  }\n  var len = arr.length, i = -1;\n  while (++i < len) {\n    if (cb(arr[i], i, arr)) {\n      return options.fn(this);\n    }\n  }\n  return options.inverse(this);\n};\n\n/**\n * Sort the given `array`. If an array of objects is passed,\n * you may optionally pass a `key` to sort on as the second\n * argument. You may alternatively pass a sorting function as\n * the second argument.\n *\n * ```handlebars\n * {{sort \"['b', 'a', 'c']\"}}\n * //=> 'a,b,c'\n * ```\n *\n * @param {Array} `array` the array to sort.\n * @param {String|Function} `key` The object key to sort by, or sorting function.\n * @api public\n */\n\nhelpers.sort = function(arr, options) {\n  if (utils.isUndefined(arr)) return '';\n  if (utils.get(options, 'hash.reverse')) {\n    return arr.sort().reverse();\n  }\n  return arr.sort();\n};\n\n/**\n * Sort an `array`. If an array of objects is passed,\n * you may optionally pass a `key` to sort on as the second\n * argument. You may alternatively pass a sorting function as\n * the second argument.\n *\n * ```handlebars\n * {{sortBy '[\"b\", \"a\", \"c\"]'}}\n * //=> 'a,b,c'\n *\n * {{sortBy '[{a: \"zzz\"}, {a: \"aaa\"}]' \"a\"}}\n * //=> '[{\"a\":\"aaa\"},{\"a\":\"zzz\"}]'\n * ```\n *\n * @param {Array} `array` the array to sort.\n * @param {String|Function} `props` One or more properties to sort by, or sorting functions to use.\n * @api public\n */\n\nhelpers.sortBy = function(arr/*, prop*/) {\n  if (utils.isUndefined(arr)) return '';\n  var args = [].slice.call(arguments);\n  args.pop(); // remove hbs options object\n\n  if (typeof args[0] === 'string' && /[[]/.test(args[0])) {\n    args[0] = utils.tryParse(args[0]) || [];\n  }\n  if (utils.isUndefined(args[1])) {\n    return args[0].sort();\n  }\n  return utils.sortBy.apply(null, args);\n};\n\n/**\n * Use the items in the array _after_ the specified index\n * as context inside a block. Opposite of [withBefore](#withBefore).\n *\n * @param {Array} `array`\n * @param {Number} `idx`\n * @param {Object} `options`\n * @return {Array}\n * @block\n * @api public\n */\n\nhelpers.withAfter = function(array, idx, options) {\n  array = array.slice(idx);\n  var result = '';\n\n  var len = array.length, i = -1;\n  while (++i < len) {\n    result += options.fn(array[i]);\n  }\n  return result;\n};\n\n/**\n * Use the items in the array _before_ the specified index\n * as context inside a block.Opposite of [withAfter](#withAfter).\n *\n * ```handlebars\n * {{#withBefore array 3}}\n *   {{this}}\n * {{/withBefore}}\n * ```\n * @param {Array} `array`\n * @param {Number} `idx`\n * @param {Object} `options`\n * @return {Array}\n * @block\n * @api public\n */\n\nhelpers.withBefore = function(array, idx, options) {\n  array = array.slice(0, -idx);\n  var result = '';\n\n  var len = array.length, i = -1;\n  while (++i < len) {\n    result += options.fn(array[i]);\n  }\n  return result;\n};\n\n/**\n * Use the first item in a collection inside a handlebars\n * block expression. Opposite of [withLast](#withLast).\n *\n * @param {Array} `array`\n * @param {Number} `idx`\n * @param {Object} `options`\n * @return {String}\n * @block\n * @api public\n */\n\nhelpers.withFirst = function(arr, idx, options) {\n  if (utils.isUndefined(arr)) return '';\n  arr = utils.result(arr);\n\n  if (!utils.isUndefined(idx)) {\n    idx = parseFloat(utils.result(idx));\n  }\n\n  if (utils.isUndefined(idx)) {\n    options = idx;\n    return options.fn(arr[0]);\n  }\n\n  arr = arr.slice(0, idx);\n  var len = arr.length, i = -1;\n  var result = '';\n  while (++i < len) {\n    result += options.fn(arr[i]);\n  }\n  return result;\n};\n\n/**\n * Use the last item or `n` items in an array as context inside a block.\n * Opposite of [withFirst](#withFirst).\n *\n * @param {Array} `array`\n * @param {Number} `idx` The starting index.\n * @param {Object} `options`\n * @return {String}\n * @block\n * @api public\n */\n\nhelpers.withLast = function(array, idx, options) {\n  if (utils.isUndefined(array)) return '';\n  array = utils.result(array);\n\n  if (!utils.isUndefined(idx)) {\n    idx = parseFloat(utils.result(idx));\n  }\n\n  if (utils.isUndefined(idx)) {\n    options = idx;\n    return options.fn(array[array.length - 1]);\n  }\n\n  array = array.slice(-idx);\n  var len = array.length, i = -1;\n  var result = '';\n  while (++i < len) {\n    result += options.fn(array[i]);\n  }\n  return result;\n};\n\n/**\n * Block helper that sorts a collection and exposes the sorted\n * collection as context inside the block.\n *\n * @name .withSort\n * @param {Array} `array`\n * @param {String} `prop`\n * @param {Object} `options` Specify `reverse=\"true\"` to reverse the array.\n * @return {String}\n * @block\n * @api public\n */\n\nhelpers.withSort = function(array, prop, options) {\n  if (utils.isUndefined(array)) return '';\n  var result = '';\n\n  if (utils.isUndefined(prop)) {\n    options = prop;\n\n    array = array.sort();\n    if (utils.get(options, 'hash.reverse')) {\n      array = array.reverse();\n    }\n\n    for (var i = 0, len = array.length; i < len; i++) {\n      result += options.fn(array[i]);\n    }\n    return result;\n  }\n\n  array.sort(function(a, b) {\n    a = utils.get(a, prop);\n    b = utils.get(b, prop);\n    return a > b ? 1 : (a < b ? -1 : 0);\n  });\n\n  if (utils.get(options, 'hash.reverse')) {\n    array = array.reverse();\n  }\n\n  var alen = array.length, j = -1;\n  while (++j < alen) {\n    result += options.fn(array[j]);\n  }\n  return result;\n};\n","/home/travis/build/npmtest/node-npmtest-handlebars-helpers/node_modules/handlebars-helpers/lib/utils/index.js":"'use strict';\n\nvar utils = require('./utils');\n\n/**\n * Returns true if the given value contains the given\n * `object`, optionally passing a starting index.\n *\n * @param {Array} val\n * @param {Object} obj\n * @param {Number} start\n * @return {Boolean}\n */\n\nutils.contains = function(val, obj, start) {\n  var len = val ? val.length : 0;\n  var idx = start < 0\n    ? Math.max(0, len + start)\n    : start;\n\n  var res = false;\n  var i = 0;\n\n  start = idx || 0;\n\n  if (Array.isArray(val)) {\n    res = utils.indexOf(val, obj, start) > -1;\n\n  } else if (utils.isNumber(len)) {\n    res = (typeof val === 'string'\n      ? val.indexOf(obj, start)\n      : utils.indexOf(val, obj, start)) > -1;\n\n  } else {\n    utils.iterator(val, function(ele) {\n      if (start < i++) {\n        return !(res = (ele === obj));\n      }\n    });\n  }\n  return res;\n};\n\n/**\n * Converts a \"regex-string\" to an actual regular expression.\n *\n * ```js\n * utils.toRegex('\"/foo/\"');\n * //=> /foo/\n * ```\n * @param {Object} `value`\n * @return {Boolean}\n * @api public\n */\n\nutils.toRegex = function(val) {\n  return new RegExp(val.replace(/^\\/|\\/$/g, ''));\n};\n\n/**\n * Returns true if the given value appears to be a\n * regular expression.\n *\n * @param {Object} `value`\n * @return {Boolean}\n * @api public\n */\n\nutils.isRegex = function(val) {\n  if (utils.typeOf(val) === 'regexp') {\n    return true;\n  }\n  if (typeof val !== 'string') {\n    return false;\n  }\n  return val.charAt(0) === '/'\n    && val.slice(-1) === '\\/';\n};\n\n/**\n * Remove leading and trailing whitespace and non-word\n * characters from the given string.\n *\n * @param {String} `str`\n * @return {String}\n */\n\nutils.chop = function(str) {\n  if (!utils.isString(str)) return '';\n  var re = /^[-_.\\W\\s]+|[-_.\\W\\s]+$/g;\n  return str.trim().replace(re, '');\n};\n\n/**\n * Change casing on the given `string`, optionally\n * passing a delimiter to use between words in the\n * returned string.\n *\n * ```js\n * utils.changecase('fooBarBaz');\n * //=> 'foo bar baz'\n *\n * utils.changecase('fooBarBaz' '-');\n * //=> 'foo-bar-baz'\n * ```\n * @param  {String} `string` The string to change.\n * @return {String}\n * @api public\n */\n\nutils.changecase = function(str, fn) {\n  if (!utils.isString(str)) return '';\n  if (str.length === 1) {\n    return str.toLowerCase();\n  }\n\n  str = utils.chop(str).toLowerCase();\n  if (typeof fn !== 'function') {\n    fn = utils.identity;\n  }\n\n  var re = /[-_.\\W\\s]+(\\w|$)/g;\n  return str.replace(re, function(_, ch) {\n    return fn(ch);\n  });\n};\n\n/**\n * Generate a random number\n *\n * @param  {Number} `min`\n * @param  {Number} `max`\n * @return {Number}\n * @api public\n */\n\nutils.random = function(min, max) {\n  return min + Math.floor(Math.random() * (max - min + 1));\n};\n\n/**\n * Returns true if the given value is `undefined` or\n * is a handlebars options hash.\n *\n * @param {any} `value`\n * @return {Boolean}\n * @api public\n */\n\nutils.isUndefined = function(val) {\n  return typeof val === 'undefined'\n    || (val.hash != null);\n};\n\n/**\n * Returns true if the given value appears to be an **options** object.\n *\n * @param {Object} `value`\n * @return {Boolean}\n * @api public\n */\n\nutils.isOptions = function(val) {\n  return utils.isObject(val) && val.hasOwnProperty('hash');\n};\n\n/**\n * Get options from the options hash and `this`.\n *\n * @param {Object} `app` The current application instance.\n * @return {Object}\n * @api public\n */\n\nutils.getArgs = function(app, args) {\n  var opts = utils.merge({}, app && app.options);\n  if (!Array.isArray(args)) {\n    args = [].slice.call(args);\n  }\n\n  var last = args[args.length - 1];\n\n  // merge `options.hash` into the options\n  if (utils.isOptions(last)) {\n    var hbsOptions = args.pop();\n    opts = utils.get(opts, hbsOptions.name) || opts;\n    opts = utils.merge({}, opts, hbsOptions.hash);\n\n  // if the last arg is an object, merge it\n  // into the options\n  } else if (utils.isObject(last)) {\n    opts = utils.merge({}, opts, args.pop());\n  }\n\n  args.push(opts);\n  return args;\n};\n\n/**\n * Returns true if the given value is an object\n * and not an array.\n *\n * @param {any} `value`\n * @return {Boolean}\n * @api public\n */\n\nutils.isObject = function(val) {\n  return val && typeof val === 'object'\n    && !Array.isArray(val);\n};\n\n/**\n * Returns true if the given value is empty.\n *\n * @param {any} `value`\n * @return {Boolean}\n * @api public\n */\n\nutils.isEmpty = function(val) {\n  if (val === 0 || val === '0') {\n    return false;\n  }\n  if (!val || (Array.isArray(val) && val.length === 0)) {\n    return true;\n  }\n  if (typeof val === 'object' && !Object.keys(val).length) {\n    return true;\n  }\n  return false;\n};\n\n/**\n * Try to parse the given `string` as JSON. Fails\n * gracefully if the value cannot be parsed.\n *\n * @name  .tryParse\n * @param {String} `string`\n * @return {Object}\n * @api public\n */\n\nutils.tryParse = function(str) {\n  try {\n    return JSON.parse(str);\n  } catch (err) {}\n  return null;\n};\n\n/**\n * Return the given value. If the value is a function\n * it will be called, and the result is returned.\n *\n * @param  {any} `val`\n * @return {any}\n * @api public\n */\n\nutils.result = function(value) {\n  if (typeof value === 'function') {\n    return value();\n  }\n  return value;\n};\n\n/**\n * Return the given value, unchanged.\n *\n * @param  {any} `val`\n * @return {any}\n * @api public\n */\n\nutils.identity = function(val) {\n  return val;\n};\n\n/**\n * Return true if `val` is a string.\n *\n * @param  {any} `val` The value to check\n * @return {Boolean}\n * @api public\n */\n\nutils.isString = function(val) {\n  return val && typeof val === 'string';\n};\n\n/**\n * Cast `val` to an array.\n *\n * @param  {any} `val` The value to arrayify.\n * @return {Array}\n * @api public\n */\n\nutils.arrayify = function(val) {\n  return val ? (Array.isArray(val) ? val : [val]) : [];\n};\n\n/**\n * Expose `utils`\n */\n\nmodule.exports = utils;\n","/home/travis/build/npmtest/node-npmtest-handlebars-helpers/node_modules/handlebars-helpers/lib/utils/utils.js":"'use strict';\n\nvar utils = require('lazy-cache')(require);\nvar fn = require;\nrequire = utils;\n\n// Array utils\nrequire('array-sort', 'sortBy');\nrequire('arr-filter', 'filter');\nrequire('arr-flatten', 'flatten');\nrequire('index-of');\n\n// Collection utils\nrequire('make-iterator', 'iterator');\n\n// Html utils\nrequire('to-gfm-code-block', 'block');\nrequire('html-tag', 'tag');\n\n// JavaScript language utils\nrequire('kind-of', 'typeOf');\n\n// matching utils\nrequire('is-glob');\nrequire('micromatch', 'mm');\n\n// Number utils\nrequire('is-even');\nrequire('is-number');\nrequire('is-odd');\n\n// Object utils\nrequire('create-frame');\nrequire('get-object');\nrequire('get-value', 'get');\nrequire('for-own');\nrequire('mixin-deep', 'merge');\n\n// Path utils\nrequire('normalize-path', 'normalize');\nrequire('relative');\nrequire = fn;\n\n/**\n * Expose `utils`\n */\n\nmodule.exports = utils;\n","/home/travis/build/npmtest/node-npmtest-handlebars-helpers/node_modules/handlebars-helpers/lib/code.js":"'use strict';\n\nvar fs = require('fs');\nvar path = require('path');\nvar object = require('./object');\nvar utils = require('./utils');\n\n/**\n * Expose `helpers`\n */\n\nvar helpers = module.exports;\n\n/**\n * Embed code from an external file as preformatted text.\n *\n * ```handlebars\n * {{embed 'path/to/file.js'}}\n *\n * // specify the language to use\n * {{embed 'path/to/file.hbs' 'html')}}\n * ```\n *\n * @param {String} `fp` filepath to the file to embed.\n * @param {String} `language` Optionally specify the language to use for syntax highlighting.\n * @return {String}\n * @api public\n */\n\nhelpers.embed = function embed(fp, ext) {\n  ext = typeof ext !== 'string' ? path.extname(fp).slice(1) : ext;\n  var code = fs.readFileSync(fp, 'utf8');\n  if (ext === 'markdown' || ext === 'md') {\n    ext = 'markdown';\n    // if the string is markdown, escape backticks\n    code = code.split('`').join('&#x60');\n  }\n  return utils.block(code, ext).trim() + '\\n';\n};\n\n/**\n * Embed a GitHub Gist using only the id of the Gist\n *\n * ```handlebars\n * {{gist \"12345\"}}\n * ```\n * @param  {String} `id`\n * @return {String}\n * @api public\n */\n\nhelpers.gist = function(id) {\n  return utils.tag('script', {src: 'https://gist.github.com/' + id + '.js'});\n};\n\n/**\n * Generate the HTML for a jsFiddle link with the given `params`\n *\n * ```handlebars\n * {{jsfiddle id=\"0dfk10ks\" tabs=\"true\"}}\n * ```\n *\n * @param {Object} `params`\n * @return {String}\n * @api public\n */\n\nhelpers.jsfiddle = function jsFiddle(options) {\n  var attr = object.merge({}, options, options.hash);\n  delete attr.name;\n  delete attr.hash;\n  delete attr.data;\n\n  if (typeof attr.id === 'undefined') {\n    throw new Error('jsfiddle helper expects an `id`');\n  }\n\n  attr.id = 'http://jsfiddle.net/' + attr.id;\n  attr.width = attr.width || '100%';\n  attr.height = attr.height || '300';\n  attr.skin = attr.skin || '/presentation/';\n  attr.tabs = (attr.tabs || 'result,js,html,css') + attr.skin;\n  attr.src = attr.id + '/embedded/' + attr.tabs;\n  attr.allowfullscreen = attr.allowfullscreen || 'allowfullscreen';\n  attr.frameborder = attr.frameborder || '0';\n\n  delete attr.tabs;\n  delete attr.skin;\n  delete attr.id;\n  return utils.tag('iframe', attr);\n};\n","/home/travis/build/npmtest/node-npmtest-handlebars-helpers/node_modules/handlebars-helpers/lib/object.js":"'use strict';\n\nvar hasOwn = Object.hasOwnProperty;\nvar array = require('./array');\nvar utils = require('./utils/');\n\n/**\n * Expose `helpers`\n */\n\nvar helpers = module.exports;\n\n/**\n * Extend the context with the properties of other objects.\n * A shallow merge is performed to avoid mutating the context.\n *\n * @param {Object} `objects` One or more objects to extend.\n * @return {Object}\n * @api public\n */\n\nhelpers.extend = function(/*objects*/) {\n  var args = [].slice.call(arguments);\n  var last = args[args.length - 1];\n\n  if (last && utils.isObject(last) && last.hash) {\n    last = last.hash;\n    args.pop(); // remove handlebars options object\n    args.push(last);\n  }\n\n  var len = args.length;\n  var context = {};\n  var i = -1;\n\n  while (++i < len) {\n    var obj = args[i];\n    if (utils.isObject(obj)) {\n      for (var key in obj) {\n        if (obj.hasOwnProperty(key)) {\n          context[key] = obj[key];\n        }\n      }\n    }\n  }\n  return context;\n};\n\n/**\n * Block helper that iterates over the properties of\n * an object, exposing each key and value on the context.\n *\n * @name .forIn\n * @param {Object} `context`\n * @param {Object} `options`\n * @return {String}\n * @block\n * @api public\n */\n\nhelpers.forIn = function(obj, options) {\n  if (!utils.isOptions(options)) {\n    return obj.inverse(this);\n  }\n\n  var data = utils.createFrame(options, options.hash);\n  var result = '';\n\n  for (var key in obj) {\n    data.key = key;\n    result += options.fn(obj[key], {data: data});\n  }\n  return result;\n};\n\n/**\n * Block helper that iterates over the **own** properties of\n * an object, exposing each key and value on the context.\n *\n * @name .forOwn\n * @param {Object} `obj` The object to iterate over.\n * @param {Object} `options`\n * @return {String}\n * @block\n * @api public\n */\n\nhelpers.forOwn = function(obj, options) {\n  if (!utils.isOptions(options)) {\n    return obj.inverse(this);\n  }\n\n  var data = utils.createFrame(options, options.hash);\n  var result = '';\n\n  for (var key in obj) {\n    if (obj.hasOwnProperty(key)) {\n      data.key = key;\n      result += options.fn(obj[key], {data: data});\n    }\n  }\n  return result;\n};\n\n/**\n * Take arguments and, if they are string or number, convert them to a dot-delineated object property path.\n *\n * @name .toPath\n * @param {String|Number} `prop` The property segments to assemble (can be multiple).\n * @return {String}\n * @api public\n */\nhelpers.toPath = function (/*prop*/) {\n  var prop = [];\n  for (var i = 0; i < arguments.length; i++) {\n    if (typeof arguments[i] === \"string\" || typeof arguments[i] === \"number\") {\n      prop.push(arguments[i]);\n    }\n  }\n  return prop.join('.');\n};\n\n/**\n * Use property paths (`a.b.c`) to get a value or nested value from\n * the context. Works as a regular helper or block helper.\n *\n * @name .get\n * @param {String} `prop` The property to get, optionally using dot notation for nested properties.\n * @param {Object} `context` The context object\n * @param {Object} `options` The handlebars options object, if used as a block helper.\n * @return {String}\n * @block\n * @api public\n */\n\nhelpers.get = function(prop, context, options) {\n  var val = utils.get(context, prop);\n  if (options && options.fn) {\n    return val ? options.fn(val) : options.inverse(context);\n  }\n  return val;\n};\n\n/**\n * Use property paths (`a.b.c`) to get an object from\n * the context. Differs from the `get` helper in that this\n * helper will return the actual object, including the\n * given property key. Also, this helper does not work as a\n * block helper.\n *\n * @name .getObject\n * @param {String} `prop` The property to get, optionally using dot notation for nested properties.\n * @param {Object} `context` The context object\n * @return {String}\n * @api public\n */\n\nhelpers.getObject = function(prop, context) {\n  return utils.getObject(context, prop);\n};\n\n/**\n * Return true if `key` is an own, enumerable property\n * of the given `context` object.\n *\n * ```handlebars\n * {{hasOwn context key}}\n * ```\n *\n * @name .hasOwn\n * @param  {String} `key`\n * @param  {Object} `context` The context object.\n * @return {Boolean}\n * @api public\n */\n\nhelpers.hasOwn = function(context, key) {\n  return hasOwn.call(context, key);\n};\n\n/**\n * Return true if `value` is an object.\n *\n * ```handlebars\n * {{isObject \"foo\"}}\n * //=> false\n * ```\n * @name .isObject\n * @param  {String} `value`\n * @return {Boolean}\n * @api public\n */\n\nhelpers.isObject = function(value) {\n  return value && typeof value === 'object'\n    && !Array.isArray(value);\n};\n\n/**\n * Deeply merge the properties of the given `objects` with the\n * context object.\n *\n * @name .merge\n * @param  {Object} `object` The target object. Pass an empty object to shallow clone.\n * @param  {Object} `objects`\n * @return {Object}\n * @api public\n */\n\nhelpers.merge = function(context/*, objects, options*/) {\n  var args = [].slice.call(arguments);\n  var last = args[args.length - 1];\n\n  if (last && typeof last === 'object' && last.hash) {\n    last = last.hash;\n    args.pop(); // remove handlebars options object\n    args.push(last);\n  }\n\n  context = utils.merge.apply(utils.merge, args);\n  return context;\n};\n\n/**\n * Block helper that parses a string using `JSON.parse`,\n * then passes the parsed object to the block as context.\n *\n * @param {String} `string` The string to parse\n * @param {Object} `options` Handlebars options object\n * @contributor github.com/keeganstreet\n * @block\n * @api public\n */\n\nhelpers.JSONparse = function(str, options) {\n  return options.fn(JSON.parse(str));\n};\n\n/**\n * Alias for parseJSON. this will be\n * deprecated in a future release\n */\n\nhelpers.parseJSON = helpers.JSONparse;\n\n/**\n * Pick properties from the context object.\n *\n * @param {Array|String} `properties` One or more properties to pick.\n * @param {Object} `context`\n * @param {Object} `options` Handlebars options object.\n * @return {Object} Returns an object with the picked values. If used as a block helper, the values are passed as context to the inner block. If no values are found, the context is passed to the inverse block.\n * @block\n * @api public\n */\n\nhelpers.pick = function(props, context, options) {\n  var keys = array.arrayify(props);\n  var len = keys.length, i = -1;\n  var result = {};\n\n  while (++i < len) {\n    result = helpers.extend(result, utils.getObject(context, keys[i]));\n  }\n\n  if (options.fn) {\n    if (Object.keys(result).length) {\n      return options.fn(result);\n    } else {\n      return options.inverse(context);\n    }\n  }\n  return result;\n};\n\n/**\n * Stringify an object using `JSON.stringify`.\n *\n * @param  {Object} `obj` Object to stringify\n * @return {String}\n * @api public\n */\n\nhelpers.JSONstringify = function(obj, indent) {\n  if (!utils.isNumber(indent)) {\n    indent = 0;\n  }\n  return JSON.stringify(obj, null, indent);\n};\n\n/**\n * Alias for JSONstringify. this will be\n * deprecated in a future release\n */\n\nhelpers.stringify = helpers.JSONstringify;\n","/home/travis/build/npmtest/node-npmtest-handlebars-helpers/node_modules/handlebars-helpers/lib/collection.js":"'use strict';\n\nvar array = require('./array');\nvar object = require('./object');\nvar utils = require('./utils');\nvar forEach = array.forEach;\nvar forOwn = object.forOwn;\n\n/**\n * Expose `helpers`\n */\n\nvar helpers = module.exports;\n\n/**\n * Block helper that returns a block if the given collection is\n * empty. If the collection is not empty the inverse block is returned\n * (if supplied).\n *\n * @name .isEmpty\n * @param {Object} `collection`\n * @param {Object} `options`\n * @return {String}\n * @block\n * @api public\n */\n\nhelpers.isEmpty = function(collection, options) {\n  if (options == null) {\n    options = collection;\n    return options.fn(this);\n  }\n\n  if (Array.isArray(collection) && !collection.length) {\n    return options.fn(this);\n  }\n\n  var keys = Object.keys(collection);\n  if (typeof collection === 'object' && !keys.length) {\n    return options.fn(this);\n  }\n  return options.inverse(this);\n};\n\n/**\n * Iterate over an array or object,\n *\n * @name .iterate\n * @param {Object|Array} `context` The collection to iterate over\n * @param {Object} `options`\n * @return {String}\n * @block\n * @api public\n */\n\nhelpers.iterate = function(context, options) {\n  if (Array.isArray(context)) {\n    return forEach.apply(forEach, arguments);\n  } else if (utils.isObject(context)) {\n    return forOwn.apply(forOwn, arguments);\n  }\n  return options.inverse(this);\n};\n\n/**\n * Returns the length of the given collection. When using a string literal in the\n * template, the string must be value JSON. See the example below. Otherwise pass\n * in an array or object from the context\n *\n * ```handlebars\n * {{length '[\"a\", \"b\", \"c\"]'}}\n * //=> 3\n *\n * //=> myArray = ['a', 'b', 'c', 'd', 'e'];\n * {{length myArray}}\n * //=> 5\n *\n * //=> myObject = {'a': 'a', 'b': 'b'};\n * {{length myObject}}\n * //=> 2\n * ```\n * @param  {Array|Object|String} `value`\n * @return {Number} The length of the value.\n * @api public\n */\n\nhelpers.length = function(value) {\n  if (utils.isUndefined(value)) return '';\n  if (typeof value === 'string' && /[[]/.test(value)) {\n    value = utils.tryParse(value) || [];\n  }\n  if (utils.isObject(value)) {\n    value = Object.keys(value);\n  }\n  return value.length;\n};\n","/home/travis/build/npmtest/node-npmtest-handlebars-helpers/node_modules/handlebars-helpers/lib/comparison.js":"'use strict';\n\nvar isObject = require('./object').isObject;\nvar isString = require('./string').isString;\nvar utils = require('./utils');\n\n/**\n * Expose `helpers`\n */\n\nvar helpers = module.exports;\n\n/**\n * Block helper that renders the block if **both** of the given values\n * are truthy. If an inverse block is specified it will be rendered\n * when falsy.\n *\n * @param {any} `a`\n * @param {any} `b`\n * @param {Object} `options` Handlebars provided options object\n * @return {String}\n * @block\n * @api public\n */\n\nhelpers.and = function(a, b, options) {\n  if (a && b) {\n    return options.fn(this);\n  }\n  return options.inverse(this);\n};\n\n/**\n * Render a block when a comparison of the first and third\n * arguments returns true. The second argument is\n * the [arithemetic operator][operators] to use. You may also\n * optionally specify an inverse block to render when falsy.\n *\n * @param `a`\n * @param `operator` The operator to use. Operators must be enclosed in quotes: `\">\"`, `\"=\"`, `\"<=\"`, and so on.\n * @param `b`\n * @param {Object} `options` Handlebars provided options object\n * @return {String} Block, or if specified the inverse block is rendered if falsey.\n * @block\n * @api public\n */\n\nhelpers.compare = function(a, operator, b, options) {\n  /*eslint eqeqeq: 0*/\n\n  if (arguments.length < 4) {\n    throw new Error('handlebars Helper {{compare}} expects 4 arguments');\n  }\n\n  var result;\n  switch (operator) {\n    case '==':\n      result = a == b;\n      break;\n    case '===':\n      result = a === b;\n      break;\n    case '!=':\n      result = a != b;\n      break;\n    case '!==':\n      result = a !== b;\n      break;\n    case '<':\n      result = a < b;\n      break;\n    case '>':\n      result = a > b;\n      break;\n    case '<=':\n      result = a <= b;\n      break;\n    case '>=':\n      result = a >= b;\n      break;\n    case 'typeof':\n      result = typeof a === b;\n      break;\n    default: {\n      throw new Error('helper {{compare}}: invalid operator: `' + operator + '`');\n    }\n  }\n\n  if (result === false) {\n    return options.inverse(this);\n  }\n  return options.fn(this);\n};\n\n/**\n * Block helper that renders the block if `collection` has the\n * given `value`, using strict equality (`===`) for comparison,\n * otherwise the inverse block is rendered (if specified). If a\n * `startIndex` is specified and is negative, it is used as the\n * offset from the end of the collection.\n *\n * Given the array `['a', 'b', 'c']`:\n *\n * ```handlebars\n * {{#contains array \"d\"}}\n *   This will not be rendered.\n * {{else}}\n *   This will be rendered.\n * {{/contains}}\n * ```\n * @param {Array|Object|String} `collection` The collection to iterate over.\n * @param {any} `value` The value to check for.\n * @param {Number} `[startIndex=0]` Optionally define the starting index.\n * @param {Object} `options` Handlebars provided options object.\n * @block\n * @api public\n */\n\nhelpers.contains = function(collection, value, startIndex, options) {\n  if (typeof startIndex === 'object') {\n    options = startIndex;\n    startIndex = undefined;\n  }\n  if (utils.contains(collection, value, startIndex)) {\n    return options.fn(this);\n  }\n  return options.inverse(this);\n};\n\n/**\n * Block helper that renders a block if `a` is **greater than** `b`.\n *\n * If an inverse block is specified it will be rendered when falsy.\n * You may optionally use the `compare=\"\"` hash argument for the\n * second value.\n *\n * @name .gt\n * @param {String} `a`\n * @param {String} `b`\n * @param {Object} `options` Handlebars provided options object\n * @return {String} Block, or inverse block if specified and falsey.\n * @block\n * @api public\n */\n\nhelpers.gt = function(a, b, options) {\n  if (arguments.length === 2) {\n    options = b;\n    b = options.hash.compare;\n  }\n  if (a > b) {\n    return options.fn(this);\n  }\n  return options.inverse(this);\n};\n\n/**\n * Block helper that renders a block if `a` is **greater than or\n * equal to** `b`.\n *\n * If an inverse block is specified it will be rendered when falsy.\n * You may optionally use the `compare=\"\"` hash argument for the\n * second value.\n *\n * @name .gte\n * @param {String} `a`\n * @param {String} `b`\n * @param {Object} `options` Handlebars provided options object\n * @return {String} Block, or inverse block if specified and falsey.\n * @block\n * @api public\n */\n\nhelpers.gte = function(a, b, options) {\n  if (arguments.length === 2) {\n    options = b;\n    b = options.hash.compare;\n  }\n  if (a >= b) {\n    return options.fn(this);\n  }\n  return options.inverse(this);\n};\n\n/**\n * Block helper that renders a block if `value` has `pattern`.\n * If an inverse block is specified it will be rendered when falsy.\n *\n * @param {any} `val` The value to check.\n * @param {any} `pattern` The pattern to check for.\n * @param {Object} `options` Handlebars provided options object\n * @return {String}\n * @block\n * @api public\n */\n\nhelpers.has = function(value, pattern, options) {\n  if (arguments.length === 2) {\n    return pattern.inverse(this);\n  }\n\n  if (arguments.length === 1) {\n    return value.inverse(this);\n  }\n\n  if ((Array.isArray(value) || isString(value)) && isString(pattern)) {\n    if (value.indexOf(pattern) > -1) {\n      return options.fn(this);\n    }\n  }\n  if (isObject(value) && isString(pattern) && pattern in value) {\n    return options.fn(this);\n  }\n  return options.inverse(this);\n};\n\n/**\n * Block helper that renders a block if `a` is **equal to** `b`.\n * If an inverse block is specified it will be rendered when falsy.\n * You may optionally use the `compare=\"\"` hash argument for the\n * second value.\n *\n * @name .eq\n * @param {String} `a`\n * @param {String} `b`\n * @param {Object} `options` Handlebars provided options object\n * @return {String} Block, or inverse block if specified and falsey.\n * @block\n * @api public\n */\n\nhelpers.eq = function(a, b, options) {\n  if (arguments.length === 2) {\n    options = b;\n    b = options.hash.compare;\n  }\n  if (a === b) {\n    return options.fn(this);\n  }\n  return options.inverse(this);\n};\n\n/**\n * Return true if the given value is an even number.\n *\n * ```handlebars\n * {{#ifEven value}}\n *   render A\n * {{else}}\n *   render B\n * {{/ifEven}}\n * ```\n * @param  {Number} `number`\n * @param {Object} `options` Handlebars provided options object\n * @return {String} Block, or inverse block if specified and falsey.\n * @block\n * @api public\n */\n\nhelpers.ifEven = function(num, options) {\n  return utils.isEven(num)\n    ? options.fn(this)\n    : options.inverse(this);\n};\n\n/**\n * Conditionally renders a block if the remainder is zero when\n * `a` operand is divided by `b`. If an inverse block is specified\n * it will be rendered when the remainder is **not zero**.\n *\n * @param {Number}\n * @param {Number}\n * @param {Object} `options` Handlebars provided options object\n * @return {String} Block, or inverse block if specified and falsey.\n * @block\n * @api public\n */\n\nhelpers.ifNth = function(a, b, options) {\n  if (utils.isNumber(a) && utils.isNumber(b) && b % a === 0) {\n    return options.fn(this);\n  }\n  return options.inverse(this);\n};\n\n/**\n * Block helper that renders a block if `value` is **an odd number**.\n * If an inverse block is specified it will be rendered when falsy.\n *\n * ```handlebars\n * {{#ifOdd value}}\n *   render A\n * {{else}}\n *   render B\n * {{/ifOdd}}\n * ```\n * @param  {Object} `value`\n * @param {Object} `options` Handlebars provided options object\n * @return {String} Block, or inverse block if specified and falsey.\n * @block\n * @api public\n */\n\nhelpers.ifOdd = function(val, options) {\n  return utils.isOdd(val)\n    ? options.fn(this)\n    : options.inverse(this);\n};\n\n/**\n * Block helper that renders a block if `a` is **equal to** `b`.\n * If an inverse block is specified it will be rendered when falsy.\n *\n * @name .is\n * @param {any} `a`\n * @param {any} `b`\n * @param {Object} `options` Handlebars provided options object\n * @return {String}\n * @block\n * @api public\n */\n\nhelpers.is = function(a, b, options) {\n  if (arguments.length === 2) {\n    options = b;\n    b = options.hash.compare;\n  }\n  if (a === b) {\n    return options.fn(this);\n  }\n  return options.inverse(this);\n};\n\n/**\n * Block helper that renders a block if `a` is **not equal to** `b`.\n * If an inverse block is specified it will be rendered when falsy.\n *\n * @name .isnt\n * @param {String} `a`\n * @param {String} `b`\n * @param {Object} `options` Handlebars provided options object\n * @return {String}\n * @block\n * @api public\n */\n\nhelpers.isnt = function(a, b, options) {\n  if (arguments.length === 2) {\n    options = b;\n    b = options.hash.compare;\n  }\n  if (a !== b) {\n    return options.fn(this);\n  }\n  return options.inverse(this);\n};\n\n/**\n * Block helper that renders a block if `a` is **less than** `b`.\n *\n * If an inverse block is specified it will be rendered when falsy.\n * You may optionally use the `compare=\"\"` hash argument for the\n * second value.\n *\n * @name .lt\n * @param {Object} `context`\n * @param {Object} `options` Handlebars provided options object\n * @return {String} Block, or inverse block if specified and falsey.\n * @block\n * @api public\n */\n\nhelpers.lt = function(a, b, options) {\n  if (arguments.length === 2) {\n    options = b;\n    b = options.hash.compare;\n  }\n  if (a < b) {\n    return options.fn(this);\n  }\n  return options.inverse(this);\n};\n\n/**\n * Block helper that renders a block if `a` is **less than or\n * equal to** `b`.\n *\n * If an inverse block is specified it will be rendered when falsy.\n * You may optionally use the `compare=\"\"` hash argument for the\n * second value.\n *\n * @name .lte\n * @param {Sring} `a`\n * @param {Sring} `b`\n * @param {Object} `options` Handlebars provided options object\n * @return {String} Block, or inverse block if specified and falsey.\n * @block\n * @api public\n */\n\nhelpers.lte = function(a, b, options) {\n  if (arguments.length === 2) {\n    options = b;\n    b = options.hash.compare;\n  }\n  if (a <= b) {\n    return options.fn(this);\n  }\n  return options.inverse(this);\n};\n\n/**\n * Block helper that renders a block if **neither of** the given values\n * are truthy. If an inverse block is specified it will be rendered\n * when falsy.\n *\n * @name .neither\n * @param {any} `a`\n * @param {any} `b`\n * @param `options` Handlebars options object\n * @return {String} Block, or inverse block if specified and falsey.\n * @block\n * @api public\n */\n\nhelpers.neither = function(a, b, options) {\n  if (!a && !b) {\n    return options.fn(this);\n  }\n  return options.inverse(this);\n};\n\n/**\n * Block helper that renders a block if **any of** the given values\n * is truthy. If an inverse block is specified it will be rendered\n * when falsy.\n *\n * ```handlebars\n * {{#or a b c}}\n *   If any value is true this will be rendered.\n * {{/or}}\n * ```\n *\n * @name .or\n * @param {...any} `arguments` Variable number of arguments\n * @param {Object} `options` Handlebars options object\n * @return {String} Block, or inverse block if specified and falsey.\n * @block\n * @api public\n */\n\nhelpers.or = function(/* any, any, ..., options */) {\n  var len = arguments.length - 1;\n  var options = arguments[len];\n\n  for (var i = 0; i < len; i++) {\n    if (arguments[i]) {\n      return options.fn(this);\n    }\n  }\n\n  return options.inverse(this);\n};\n\n/**\n * Block helper that always renders the inverse block **unless `a` is\n * is equal to `b`**.\n *\n * @name .unlessEq\n * @param {String} `a`\n * @param {String} `b`\n * @param {Object} `options` Handlebars provided options object\n * @return {String} Inverse block by default, or block if falsey.\n * @block\n * @api public\n */\n\nhelpers.unlessEq = function(context, options) {\n  if (context === options.hash.compare) {\n    return options.inverse(this);\n  }\n  return options.fn(this);\n};\n\n/**\n * Block helper that always renders the inverse block **unless `a` is\n * is greater than `b`**.\n *\n * @name .unlessGt\n * @param {Object} `context`\n * @param {Object} `options` Handlebars provided options object\n * @return {String} Inverse block by default, or block if falsey.\n * @block\n * @api public\n */\n\nhelpers.unlessGt = function(context, options) {\n  if (context > options.hash.compare) {\n    return options.inverse(this);\n  }\n  return options.fn(this);\n};\n\n/**\n * Block helper that always renders the inverse block **unless `a` is\n * is less than `b`**.\n *\n * @name .unlessLt\n * @param {Object} `context`\n * @param {Object} `options` Handlebars provided options object\n * @return {String} Block, or inverse block if specified and falsey.\n * @block\n * @api public\n */\n\nhelpers.unlessLt = function(context, options) {\n  if (context < options.hash.compare) {\n    return options.inverse(this);\n  }\n  return options.fn(this);\n};\n\n/**\n * Block helper that always renders the inverse block **unless `a` is\n * is greater than or equal to `b`**.\n *\n * @name .unlessGteq\n * @param {Object} `context`\n * @param {Object} `options` Handlebars provided options object\n * @return {String} Block, or inverse block if specified and falsey.\n * @block\n * @api public\n */\n\nhelpers.unlessGteq = function(context, options) {\n  if (context >= options.hash.compare) {\n    return options.inverse(this);\n  }\n  return options.fn(this);\n};\n\n/**\n * Block helper that always renders the inverse block **unless `a` is\n * is less than or equal to `b`**.\n *\n * @name .unlessLteq\n * @param {Object} `context`\n * @param {Object} `options` Handlebars provided options object\n * @return {String} Block, or inverse block if specified and falsey.\n * @block\n * @api public\n */\n\nhelpers.unlessLteq = function(context, options) {\n  if (context <= options.hash.compare) {\n    return options.inverse(this);\n  }\n  return options.fn(this);\n};\n","/home/travis/build/npmtest/node-npmtest-handlebars-helpers/node_modules/handlebars-helpers/lib/string.js":"'use strict';\n\nvar utils = require('./utils');\n\n/**\n * Expose `helpers`\n */\n\nvar helpers = module.exports;\n\n/**\n * camelCase the characters in the given `string`.\n *\n * ```js\n * {{camelcase \"foo bar baz\"}};\n * //=> 'fooBarBaz'\n * ```\n *\n * @name .camelcase\n * @param  {String} `string` The string to camelcase.\n * @return {String}\n * @api public\n */\n\nhelpers.camelcase = function(str) {\n  return utils.changecase(str, function(ch) {\n    return ch.toUpperCase();\n  });\n};\n\n/**\n * Capitalize the first word in a sentence.\n *\n * ```handlebars\n * {{capitalize \"foo bar baz\"}}\n * //=> \"Foo bar baz\"\n * ```\n * @param  {String} `str`\n * @return {String}\n * @api public\n */\n\nhelpers.capitalize = function(str) {\n  if (str && typeof str === 'string') {\n    return str.charAt(0).toUpperCase()\n      + str.slice(1);\n  }\n};\n\n/**\n * Capitalize all words in a string.\n *\n * ```handlebars\n * {{capitalizeAll \"foo bar baz\"}}\n * //=> \"Foo Bar Baz\"\n * ```\n * @param  {String} `str`\n * @return {String}\n * @api public\n */\n\nhelpers.capitalizeAll = function(str) {\n  if (str && typeof str === 'string') {\n    return str.replace(/\\w\\S*/g, function(word) {\n      return exports.capitalize(word);\n    });\n  }\n};\n\n/**\n * Center a string using non-breaking spaces\n *\n * @param  {String} `str`\n * @param  {String} `spaces`\n * @return {String}\n * @api public\n */\n\nhelpers.center = function(str, spaces) {\n  if (str && typeof str === 'string') {\n    var space = '';\n    var i = 0;\n    while (i < spaces) {\n      space += '&nbsp;';\n      i++;\n    }\n    return space + str + space;\n  }\n};\n\n/**\n * Like trim, but removes both extraneous whitespace **and\n * non-word characters** from the beginning and end of a string.\n *\n * ```js\n * {{chop \"_ABC_\"}}\n * //=> 'ABC'\n *\n * {{chop \"-ABC-\"}}\n * //=> 'ABC'\n *\n * {{chop \" ABC \"}}\n * //=> 'ABC'\n * ```\n *\n * @name .chop\n * @param  {String} `string` The string to chop.\n * @return {String}\n * @api public\n */\n\nhelpers.chop = function(str) {\n  return utils.chop(str);\n};\n\n/**\n * dash-case the characters in `string`. Replaces non-word\n * characters and periods with hyphens.\n *\n * ```js\n * {{dashcase \"a-b-c d_e\"}}\n * //=> 'a-b-c-d-e'\n * ```\n *\n * @param  {String} `string`\n * @return {String}\n * @api public\n */\n\nhelpers.dashcase = function(str) {\n  return utils.changecase(str, function(ch) {\n    return '-' + ch;\n  });\n};\n\n/**\n * dot.case the characters in `string`.\n *\n * ```js\n * {{dotcase \"a-b-c d_e\"}}\n * //=> 'a.b.c.d.e'\n * ```\n *\n * @param  {String} `string`\n * @return {String}\n * @api public\n */\n\nhelpers.dotcase = function(str) {\n  return utils.changecase(str, function(ch) {\n    return '.' + ch;\n  });\n};\n\n/**\n * Replace spaces in a string with hyphens.\n *\n * ```handlebars\n * {{hyphenate \"foo bar baz qux\"}}\n * //=> \"foo-bar-baz-qux\"\n * ```\n * @param  {String} `str`\n * @return {String}\n * @api public\n */\n\nhelpers.hyphenate = function(str) {\n  if (str && typeof str === 'string') {\n    return str.split(' ').join('-');\n  }\n};\n\n/**\n * Return true if `value` is a string.\n *\n * ```handlebars\n * {{isString \"foo\"}}\n * //=> 'true'\n * ```\n * @param  {String} `value`\n * @return {Boolean}\n * @api public\n */\n\nhelpers.isString = function(value) {\n  return utils.isString(value);\n};\n\n/**\n * Lowercase all characters in the given string.\n *\n * ```handlebars\n * {{lowercase \"Foo BAR baZ\"}}\n * //=> 'foo bar baz'\n * ```\n * @param  {String} `str`\n * @return {String}\n * @api public\n */\n\nhelpers.lowercase = function(str) {\n  if (str && typeof str === 'string') {\n    return str.toLowerCase();\n  }\n};\n\n/**\n * Return the number of occurrances of `substring` within the\n * given `string`.\n *\n * ```handlebars\n * {{occurrances \"foo bar foo bar baz\" \"foo\"}}\n * //=> 2\n * ```\n * @param  {String} `str`\n * @param  {String} `substring`\n * @return {Number} Number of occurrances\n * @api public\n */\n\nhelpers.occurrences = function(str, substring) {\n  if (str && typeof str === 'string') {\n    var len = substring.length;\n    var pos = 0;\n    var n = 0;\n\n    while ((pos = str.indexOf(substring, pos))) {\n      if (pos > -1) {\n        n++;\n        pos += len;\n      } else {\n        break;\n      }\n    }\n    return n;\n  }\n};\n\n/**\n * PascalCase the characters in `string`.\n *\n * ```js\n * {{pascalcase \"foo bar baz\"}}\n * //=> 'FooBarBaz'\n * ```\n *\n * @name .pascalcase\n * @param  {String} `string`\n * @return {String}\n * @api public\n */\n\nhelpers.pascalcase = function(str) {\n  str = utils.changecase(str, function(ch) {\n    return ch.toUpperCase();\n  });\n  return str.charAt(0).toUpperCase()\n    + str.slice(1);\n};\n\n/**\n * path/case the characters in `string`.\n *\n * ```js\n * {{pathcase \"a-b-c d_e\"}}\n * //=> 'a/b/c/d/e'\n * ```\n *\n * @param  {String} `string`\n * @return {String}\n * @api public\n */\n\nhelpers.pathcase = function(str) {\n  return utils.changecase(str, function(ch) {\n    return '/' + ch;\n  });\n};\n\n/**\n * Replace spaces in the given string with pluses.\n *\n * ```handlebars\n * {{plusify \"foo bar baz\"}}\n * //=> 'foo+bar+baz'\n * ```\n * @param  {String} `str` The input string\n * @return {String} Input string with spaces replaced by plus signs\n * @source Stephen Way <https://github.com/stephenway>\n * @api public\n */\n\nhelpers.plusify = function(str) {\n  if (str && typeof str === 'string') {\n    return str.split(' ').join('+');\n  }\n};\n\n/**\n * Reverse a string.\n *\n * ```handlebars\n * {{reverse \"abcde\"}}\n * //=> 'edcba'\n * ```\n * @name .reverse\n * @param {String} `str`\n * @return {String}\n * @api public\n */\n\nhelpers.reverse = function(str) {\n  if (str && typeof str === 'string') {\n    return str.split('').reverse().join('');\n  }\n};\n\n/**\n * Replace all occurrences of `a` with `b`.\n *\n * ```handlebars\n * {{replace \"a b a b a b\" \"a\" \"z\"}}\n * //=> 'z b z b z b'\n * ```\n * @param  {String} `str`\n * @param  {String} `a`\n * @param  {String} `b`\n * @return {String}\n * @api public\n */\n\nhelpers.replace = function(str, a, b) {\n  if (str && typeof str === 'string') {\n    if (!a || typeof a !== 'string') return str;\n    if (!b || typeof b !== 'string') b = '';\n    return str.split(a).join(b);\n  }\n};\n\n/**\n * Sentence case the given string\n *\n * ```handlebars\n * {{sentence \"hello world. goodbye world.\"}}\n * //=> 'Hello world. Goodbye world.'\n * ```\n * @param  {String} `str`\n * @return {String}\n * @api public\n */\n\nhelpers.sentence = function(str) {\n  if (str && typeof str === 'string') {\n    var re = /((?:\\S[^\\.\\?\\!]*)[\\.\\?\\!]*)/g;\n    return str.replace(re, function(txt) {\n      return txt.charAt(0).toUpperCase()\n        + txt.substr(1).toLowerCase();\n    });\n  }\n};\n\n/**\n * snake_case the characters in the given `string`.\n *\n * ```js\n * {{snakecase \"a-b-c d_e\"}}\n * //=> 'a_b_c_d_e'\n * ```\n *\n * @param  {String} `string`\n * @return {String}\n * @api public\n */\n\nhelpers.snakecase = function(str) {\n  return utils.changecase(str, function(ch) {\n    return '_' + ch;\n  });\n};\n\n/**\n * Split `string` by the given `character`.\n *\n * ```js\n * {{split \"a,b,c\" \",\"}}\n * //=> ['a', 'b', 'c']\n * ```\n *\n * @param  {String} `string` The string to split.\n * @return {String} `character` Default is `,`\n * @api public\n */\n\nhelpers.split = function(str, ch) {\n  if (!helpers.isString(str)) return '';\n  if (typeof ch !== 'string') ch = ',';\n  return str.split(ch);\n};\n\n/**\n * Tests whether a string begins with the given prefix.\n *\n * ```handlebars\n * {{#startsWith \"Goodbye\" \"Hello, world!\"}}\n *   Whoops\n * {{else}}\n *   Bro, do you even hello world?\n * {{/startsWith}}\n * ```\n * @param  {String} `prefix`\n * @param  {String} `testString`\n * @param  {String} `options`\n * @contributor Dan Fox <http://github.com/iamdanfox>\n * @return {String}\n * @block\n * @api public\n */\n\nhelpers.startsWith = function(prefix, str, options) {\n  var args = [].slice.call(arguments);\n  options = args.pop();\n  if (str && typeof str === 'string') {\n    if (str.indexOf(prefix) === 0) {\n      return options.fn(this);\n    }\n  }\n  if (typeof options.inverse === 'function') {\n    return options.inverse(this);\n  }\n  return '';\n};\n\n/**\n * Title case the given string.\n *\n * ```handlebars\n * {{titleize \"this is title case\"}}\n * //=> 'This Is Title Case'\n * ```\n * @param  {String} `str`\n * @return {String}\n * @api public\n */\n\nhelpers.titleize = function(str) {\n  if (str && typeof str === 'string') {\n    var title = str.replace(/[ \\-_]+/g, ' ');\n    var words = title.match(/\\w+/g);\n    var len = words.length;\n    var res = [];\n    var i = 0;\n    while (len--) {\n      var word = words[i++];\n      res.push(exports.capitalize(word));\n    }\n    return res.join(' ');\n  }\n};\n\n/**\n * Removes extraneous whitespace from the beginning and end\n * of a string.\n *\n * ```js\n * {{trim \" ABC \"}}\n * //=> 'ABC'\n * ```\n *\n * @name .trim\n * @param  {String} `string` The string to trim.\n * @return {String}\n * @api public\n */\n\nhelpers.trim = function(str) {\n  if (!helpers.isString(str)) return '';\n  return str.trim();\n};\n\n/**\n * Uppercase all of the characters in the given string. If used as a\n * block helper it will uppercase the entire block. This helper\n * does not support inverse blocks.\n *\n * @name .uppercase\n * @related capitalize capitalizeAll\n * @param {String} `str` The string to uppercase\n * @param {Object} `options` Handlebars options object\n * @return {String}\n * @block\n * @api public\n */\n\nhelpers.uppercase = function(str, options) {\n  if (str && typeof str === 'string') {\n    return str.toUpperCase();\n  } else {\n    options = str;\n  }\n  if (typeof options === 'object' && options.fn) {\n    return options.fn(this).toUpperCase();\n  }\n  return '';\n};\n","/home/travis/build/npmtest/node-npmtest-handlebars-helpers/node_modules/handlebars-helpers/lib/date.js":"'use strict';\n\n/**\n * Expose `helpers`\n */\n\nvar helpers = module.exports;\n\n/**\n * Expose `moment` helper\n * @exposes helper-date as moment\n * @api public\n */\n\nhelpers.moment = require('helper-date');\n","/home/travis/build/npmtest/node-npmtest-handlebars-helpers/node_modules/handlebars-helpers/lib/fs.js":"'use strict';\n\nvar fs = require('fs');\nvar path = require('path');\nvar utils = require('./utils');\n\n/**\n * Expose `helpers`\n */\n\nvar helpers = module.exports;\n\n/**\n * Converts bytes into a nice representation with unit.\n *\n * **Examples:**\n *\n *   - `13661855 => 13.7 MB`\n *   - `825399 => 825 KB`\n *   - `1396 => 1 KB`\n *\n * @param {String} `value`\n * @return {String}\n * @api public\n */\n\nhelpers.fileSize = function(num) {\n  var bytes = parseInt(num, 10);\n\n  if (!utils.isNumber(bytes)) {\n    console.error('helper {{fileSize}} cannot parse: \"' + num + '\"');\n    return num.toString(); // Graceful degradation\n  }\n\n  // KB is technically a Kilobit, but it seems more readable.\n  var metric = ['byte', 'bytes', 'KB', 'MB', 'GB'];\n\n  var res;\n  if (bytes === 0) {\n    return '0 bytes';\n  } else {\n    // Base 1000 (rather than 1024) matches Mac OS X\n    res = Math.floor(Math.log(bytes) / Math.log(1000));\n\n    // No decimals for anything smaller than 1 MB\n    num = (bytes / Math.pow(1000, Math.floor(res))).toFixed(res < 2 ? 0 : 1);\n\n    if (bytes === 1) {\n      res = -1; // special case: 1 byte (singular)\n    }\n  }\n  return num + ' ' + metric[res + 1];\n};\n\n/**\n * Read a file from the file system. This is useful in composing\n * \"include\"-style helpers using sub-expressions.\n *\n * ```js\n * {{read \"a/b/c.js\"}}\n * {{someHelper (read \"a/b/c.md\")}}\n * ```\n * @param {String} `filepath`\n * @return {String}\n * @api public\n */\n\nhelpers.read = function(filepath) {\n  return fs.readFileSync(filepath, 'utf8');\n};\n\n/**\n * Return an array of files from the given\n * directory.\n *\n * @param {String} `directory`\n * @return {Array}\n * @api public\n */\n\nhelpers.readdir = function(dir, filter) {\n  var files = fs.readdirSync(dir);\n  files = files.map(function(fp) {\n    return path.join(dir, fp);\n  });\n  if (utils.isOptions(filter)) {\n    return files;\n  }\n  if (typeof filter === 'function') {\n    return filter(files);\n  }\n  if (utils.isRegex(filter)) {\n    var re = utils.toRegex(filter);\n    return files.filter(function(fp) {\n      return re.test(fp);\n    });\n  }\n  if (utils.isGlob(filter)) {\n    var isMatch = utils.mm.matcher(filter);\n    return files.filter(function(fp) {\n      return isMatch(fp);\n    });\n  }\n  if (['isFile', 'isDirectory'].indexOf(filter) !== -1) {\n    return files.filter(function(fp) {\n      var stat = fs.statSync(fp);\n      return stat[filter]();\n    });\n  }\n  return files;\n};\n","/home/travis/build/npmtest/node-npmtest-handlebars-helpers/node_modules/handlebars-helpers/lib/html.js":"'use strict';\n\nvar path = require('path');\nvar html = require('./utils/html');\nvar utils = require('./utils');\nvar parseAttr = html.parseAttributes;\n\n/**\n * Expose `helpers`\n */\n\nvar helpers = module.exports;\n\n/**\n * Add an array of `<link>` tags. Automatically resolves\n * relative paths to `options.assets` if passed on the context.\n *\n * @param  {Object} `context`\n * @return {String}\n * @api public\n */\n\nhelpers.css = function(array, options) {\n  if (arguments.length < 2) {\n    options = array;\n    array = [];\n  }\n\n  var styles = utils.arrayify(array);\n  var assets = '';\n\n  if (this && this.options) {\n    assets = this.options.assets || '';\n  }\n\n  if (options.hash.href) {\n    styles = utils.arrayify(options.hash.href);\n  }\n\n  return styles.map(function(item) {\n    var ext = path.extname(item);\n    var fp = path.join(assets, item);\n\n    if (ext === '.less') {\n      return '<link type=\"text/css\" rel=\"stylesheet/less\" href=\"' + fp + '\">';\n    }\n    return '<link type=\"text/css\" rel=\"stylesheet\" href=\"' + fp + '\">';\n  }).join('\\n');\n};\n\n/**\n * Truncates a string to the specified `length`, and appends\n * it with an elipsis, `…`.\n *\n * ```js\n * {{ellipsis \"<span>foo bar baz</span>\", 7}}\n * //=> 'foo bar…'\n * ```\n * @name .ellipsis\n * @param {String} `str`\n * @param {Number} `length` The desired length of the returned string.\n * @return {String} The truncated string.\n * @api public\n */\n\nhelpers.ellipsis = function(str, limit) {\n  if (str && typeof str === 'string') {\n    if (str.length <= limit) {\n      return str;\n    }\n    return helpers.truncate(str, limit) + '…';\n  }\n};\n\n/**\n * Generate one or more `<script></script>` tags with paths/urls to\n * javascript or coffeescript files.\n *\n * ```handlebars\n * {{js scripts}}\n * ```\n *\n * @param  {Object} `context`\n * @return {String}\n * @api public\n */\n\nhelpers.js = function(context) {\n  if (utils.typeOf(context) === 'object') {\n    var attr = html.toAttributes(context.hash);\n    return '<script' + attr + '></script>';\n  }\n\n  if (utils.typeOf(context) === 'string') {\n    return '<script src=\"' + context + '\"></script>';\n  }\n\n  context = utils.arrayify(context);\n  return context.map(function(fp) {\n    return (path.extname(fp) === '.coffee')\n      ? utils.tag('script', {type: 'text/coffeescript', src: fp})\n      : utils.tag('script', {src: fp});\n  }).join('\\n');\n};\n\n/**\n * Strip HTML tags from a string, so that only the text nodes\n * are preserved.\n *\n * ```js\n * {{sanitize \"<span>foo</span>\"}}\n * //=> 'foo'\n * ```\n *\n * @param  {String} `str` The string of HTML to sanitize.\n * @return {String}\n * @api public\n */\n\nhelpers.sanitize = function(str) {\n  return html.sanitize(str);\n};\n\n/**\n * Truncate a string by removing all HTML tags and limiting the result\n * to the specified `length`. Aslo see [ellipsis](#ellipsis).\n *\n * ```js\n * truncate(\"<span>foo bar baz</span>\", 7);\n * //=> 'foo bar'\n * ```\n *\n * @name .truncate\n * @param  {String} `str`\n * @param  {Number} `limit` The desired length of the returned string.\n * @param  {String} `suffix` Optionally supply a string to use as a suffix to\n * denote when the string has been truncated.\n * @return {String} The truncated string.\n * @api public\n */\n\nhelpers.truncate = function(str, limit, suffix) {\n  if (str && typeof str === 'string') {\n    var ch = typeof suffix === 'string' ? suffix : '';\n    if (str.length > limit) {\n      return html.sanitize(str).slice(0, limit - ch.length) + ch;\n    }\n    return str;\n  }\n};\n\n/**\n * Block helper for creating unordered lists (`<ul></ul>`)\n *\n * @param  {Object} `context`\n * @param  {Object} `options`\n * @return {String}\n * @block\n * @api public\n */\n\nhelpers.ul = function(context, options) {\n  return ('<ul ' + (parseAttr(options.hash)) + '>') + context.map(function(item) {\n    if (typeof item !== 'string') {\n      item = options.fn(item);\n    }\n    return '<li>' + item + '</li>';\n  }).join('\\n') + '</ul>';\n};\n\n/**\n * Block helper for creating ordered lists  (`<ol></ol>`)\n *\n * @param  {Object} `context`\n * @param  {Object} `options`\n * @return {String}\n * @block\n * @api public\n */\n\nhelpers.ol = function(context, options) {\n  return ('<ol ' + (parseAttr(options.hash)) + '>') + context.map(function(item) {\n    if (typeof item !== 'string') {\n      item = options.fn(item);\n    }\n    return '<li>' + item + '</li>';\n  }).join('\\n') + '</ol>';\n};\n\n/**\n * Returns a `<figure>` with a thumbnail linked to a full picture\n *\n * @param  {Object} `context` Object with values/attributes to add to the generated elements:\n * @param {String} `context.alt`\n * @param {String} `context.src`\n * @param {Number} `context.width`\n * @param {Number} `context.height`\n * @return {String} HTML `<figure>` element with image and optional caption/link.\n * @contributor: Marie Hogebrandt <https://github.com/Melindrea>\n * @api public\n */\n\nhelpers.thumbnailImage = function(context) {\n  var figure = '';\n  var image = '';\n\n  var link = context.full || false;\n  var imageAttributes = {\n    alt: context.alt,\n    src: context.thumbnail,\n    width: context.size.width,\n    height: context.size.height\n  };\n\n  var figureAttributes = { id: 'image-' + context.id };\n  var linkAttributes = { href: link, rel: 'thumbnail' };\n\n  if (context.classes) {\n    if (context.classes.image) {\n      imageAttributes.class = context.classes.image.join(' ');\n    }\n    if (context.classes.figure) {\n      figureAttributes.class = context.classes.figure.join(' ');\n    }\n    if (context.classes.link) {\n      linkAttributes.class = context.classes.link.join(' ');\n    }\n  }\n\n  figure += '<figure ' + parseAttr(figureAttributes) + '>\\n';\n  image += '<img ' + parseAttr(imageAttributes) + '>\\n';\n\n  if (link) {\n    figure += '<a ' + parseAttr(linkAttributes) + '>\\n' + image + '</a>\\n';\n  } else {\n    figure += image;\n  }\n\n  if (context.caption) {\n    figure += '<figcaption>' + context.caption + '</figcaption>\\n';\n  }\n\n  figure += '</figure>';\n  return figure;\n};\n","/home/travis/build/npmtest/node-npmtest-handlebars-helpers/node_modules/handlebars-helpers/lib/utils/html.js":"'use strict';\n\nvar striptags = require('striptags');\nvar typeOf = require('kind-of');\nvar utils = require('./');\n\n/**\n * Expose `utils`\n */\n\nvar html = module.exports;\n\n/**\n * Remove extra newlines from HTML, respect indentation.\n *\n * @param  {String} html\n * @return {String}\n * @api public\n */\n\nhtml.condense = function(str) {\n  return str.replace(/(\\r\\n|\\r|\\n|\\u2028|\\u2029) {2,}/g, '\\n');\n};\n\n/**\n * Add a single newline above code comments in HTML\n *\n * @param  {String} `html`\n * @return {String}\n * @api public\n */\n\nhtml.padcomments = function(str) {\n  return str.replace(/(\\s*<!--)/g, '\\n$1');\n};\n\n/**\n * Parse HTML tag attributes from the `options.hash`.\n *\n * @param {Object} `hash` Helper options hash, e.g. `{foo: 'bar'}`\n * @return {String} Stringified attributes, e.g. `foo=\"bar\"`\n * @api public\n */\n\nhtml.parseAttributes = function parseAttributes(hash) {\n  return Object.keys(hash).map(function(key) {\n    return key + '=\"' + hash[key] + '\"';\n  }).join(' ');\n};\n\n/**\n * Strip HTML tags from a string, so that only the text nodes\n * are preserved.\n *\n * ```js\n * {{sanitize \"<span>foo</span>\"}}\n * //=> 'foo'\n * ```\n *\n * @param  {String} `str` The string of HTML to sanitize.\n * @return {String}\n * @api public\n */\n\nhtml.sanitize = function(str) {\n  if (!utils.isString(str)) return '';\n  return striptags(str).trim();\n};\n\nhtml.toAttributes = function toAttributes(hash) {\n  var res = '';\n  for (var key in hash) {\n    if (hash.hasOwnProperty(key) && typeOf(hash[key] === 'string')) {\n      res += ' ' + key + '=\"' + hash[key] + '\"';\n    }\n  }\n  return res;\n};\n","/home/travis/build/npmtest/node-npmtest-handlebars-helpers/node_modules/handlebars-helpers/lib/i18n.js":"'use strict';\n\nvar utils = require('./utils');\n\n/**\n * Expose `helpers`\n */\n\nvar helpers = module.exports;\n\n/**\n * i18n helper. See [button-i18n](https://github.com/assemble/buttons)\n * for a working example.\n *\n * @contributor Laurent Goderre <https://github.com/LaurentGoderrre>\n * @param  {String} `key`\n * @param  {Object} `options`\n * @return {String}\n * @api public\n */\n\nhelpers.i18n = function(prop, context, options) {\n  if (utils.isOptions(context)) {\n    options = context;\n    context = {};\n  }\n\n  if (typeof prop !== 'string') {\n    throw new Error('{{i18n}} helper expected \"key\" to be a string');\n  }\n\n  var opts = utils.merge({}, this, options.hash);\n\n  // account for `options` being passed on the context\n  if (opts.options) {\n    opts = utils.merge({}, opts, opts.options);\n    delete opts.options;\n  }\n\n  var lang = opts.language || opts.lang;\n\n  if (typeof lang !== 'string') {\n    throw new Error('{{i18n}} helper expected \"language\" parameter to be a string');\n  }\n\n  var value = utils.get(opts, lang);\n  if (typeof value === 'undefined') {\n    throw new Error('{{i18n}} helper cannot find language \"' + lang + '\"');\n  }\n\n  var result = utils.get(value, prop);\n  if (typeof result === 'undefined') {\n    throw new Error('{{i18n}} helper cannot find property \"' + prop + '\" for language \"' + lang + '\"');\n  }\n\n  return result;\n};\n","/home/travis/build/npmtest/node-npmtest-handlebars-helpers/node_modules/handlebars-helpers/lib/inflection.js":"'use strict';\n\nvar utils = require('./utils');\n\n/**\n * Expose `helpers`\n */\n\nvar helpers = module.exports;\n\n/**\n * @name .inflect\n * @param {Number} `count`\n * @param {String} `singular` The singular form\n * @param {String} `plural` The plural form\n * @param {String} `include`\n * @return {String}\n * @api public\n */\n\nhelpers.inflect = function(count, singular, plural, include) {\n  var word = (count > 1 || count === 0) ? plural : singular;\n\n  if (utils.isUndefined(include) || include === false) {\n    return word;\n  } else {\n    return String(count) + ' ' + word;\n  }\n};\n\n/**\n * Returns an ordinalized number (as a string).\n *\n * ```handlebars\n * {{ordinalize 1}}\n * //=> '1st'\n * {{ordinalize 21}}\n * //=> '21st'\n * {{ordinalize 29}}\n * //=> '29th'\n * {{ordinalize 22}}\n * //=> '22nd'\n * ```\n *\n * @param {String} `val` The value to ordinalize.\n * @return {String} The ordinalized number\n * @api public\n */\n\nhelpers.ordinalize = function(val) {\n  var num = Math.abs(Math.round(val));\n  var res = num % 100;\n\n  if (utils.indexOf([11, 12, 13], res) >= 0) {\n    return '' + val + 'th';\n  }\n\n  switch (num % 10) {\n    case 1:\n      return '' + val + 'st';\n    case 2:\n      return '' + val + 'nd';\n    case 3:\n      return '' + val + 'rd';\n    default: {\n      return '' + val + 'th';\n    }\n  }\n};\n","/home/travis/build/npmtest/node-npmtest-handlebars-helpers/node_modules/handlebars-helpers/lib/logging.js":"'use strict';\n\n/**\n * [logging-helpers](https://github.com/helpers/logging-helpers).\n * @api public\n */\n\nmodule.exports = require('logging-helpers');\n","/home/travis/build/npmtest/node-npmtest-handlebars-helpers/node_modules/handlebars-helpers/lib/markdown.js":"'use strict';\n\n/**\n * Expose markdown `helpers` (for performance we're using getters so\n * that the helpers are only loaded if called)\n */\n\nvar helpers = module.exports;\nvar markdown;\n\n/**\n * Block helper that converts a string of inline markdown to HTML.\n *\n * ```html\n * {{#markdown}}\n * # Foo\n * {{/markdown}}\n * //=> <h1>Foo</h1>\n * ```\n * @name .markdown\n * @param {Object} `context`\n * @param {Object} `options`\n * @return {String}\n * @block\n * @api public\n */\n\nObject.defineProperty(helpers, 'markdown', {\n  configurable: true,\n  enumerable: true,\n  set: function(val) {\n    markdown = val;\n  },\n  get: function() {\n    // this is defined as a getter to avoid calling this function\n    // unless the helper is actually used\n    return markdown || (markdown = require('helper-markdown')());\n  }\n});\n\n/**\n * Read a markdown file from the file system and inject its contents after\n * converting it to HTML.\n *\n * ```html\n * {{md \"foo/bar.md\"}}\n * ```\n * @name .md\n * @param {Object} `context`\n * @param {Object} `options`\n * @return {String}\n * @block\n * @api public\n */\n\nhelpers.md = require('helper-md');\n","/home/travis/build/npmtest/node-npmtest-handlebars-helpers/node_modules/handlebars-helpers/lib/match.js":"'use strict';\n\nvar utils = require('./utils');\n\n/**\n * Expose `helpers`\n */\n\nvar helpers = module.exports;\n\n/**\n * The main function. Pass an array of filepaths,\n * and a string or array of glob patterns. Options may\n * be passed on the hash or on `this.options`.\n *\n * ```handlebars\n * {{match (readdir \"foo\") \"*.js\"}}\n * ```\n * @param  {Array|String} `files`\n * @param  {Array|String} `patterns` One or more glob patterns.\n * @param  {Object} `options`\n * @return {Array} Array of matches\n * @api public\n */\n\nhelpers.mm = function() {\n  var args = utils.getArgs(this, arguments);\n  return utils.mm.apply(utils.mm, args);\n};\n\n/**\n * Returns an array of files that match the given glob pattern.\n * Options may be passed on the hash or on `this.options`.\n *\n * ```handlebars\n * {{match (readdir \"foo\") \"*.js\"}}\n * ```\n * @param  {Array} `files`\n * @param  {String} `pattern`\n * @param  {Object} `options`\n * @return {Array}\n * @api public\n */\n\nhelpers.match = function() {\n  var args = utils.getArgs(this, arguments);\n  return utils.mm.match.apply(utils.mm, args);\n};\n\n/**\n * Returns true if a filepath contains the given pattern.\n * Options may be passed on the hash or on `this.options`.\n *\n * ```js\n * {{isMatch \"foo.md\" \"*.md\"}}\n * //=> true\n * ```\n *\n * @param  {String} `filepath`\n * @param  {String} `pattern`\n * @param  {Object} `options`\n * @return {Boolean}\n * @api public\n */\n\nhelpers.isMatch = function() {\n  var args = utils.getArgs(this, arguments);\n  return utils.mm.isMatch.apply(utils.mm, args);\n};\n","/home/travis/build/npmtest/node-npmtest-handlebars-helpers/node_modules/handlebars-helpers/lib/math.js":"'use strict';\n\nvar utils = require('./utils');\n\n/**\n * Expose `helpers`\n */\n\nvar helpers = module.exports;\n\n/**\n * Return the product of `a` plus `b`.\n *\n * @param {Number} `a`\n * @param {Number} `b`\n * @api public\n */\n\nhelpers.add = function(a, b) {\n  return a + b;\n};\n\n/**\n * Return the product of `a` minus `b`.\n *\n * @param {Number} a\n * @api public\n */\n\nhelpers.subtract = function(a, b) {\n  return a - b;\n};\n\n/**\n * Divide `a` by `b`\n *\n * @param {Number} `a` numerator\n * @param {Number} `b` denominator\n * @api public\n */\n\nhelpers.divide = function(a, b) {\n  return a / b;\n};\n\n/**\n * Multiply `a` by `b`.\n *\n * @param {Number} `a` factor\n * @param {Number} `b` multiplier\n * @api public\n */\n\nhelpers.multiply = function(a, b) {\n  return a * b;\n};\n\n/**\n * Get the `Math.floor()` of the given value.\n *\n * @param {Number} `value`\n * @api public\n */\n\nhelpers.floor = function(value) {\n  return Math.floor(value);\n};\n\n/**\n * Get the `Math.ceil()` of the given value.\n *\n * @param {Number} `value`\n * @api public\n */\n\nhelpers.ceil = function(value) {\n  return Math.ceil(value);\n};\n\n/**\n * Round the given value.\n *\n * @param {Number} `value`\n * @api public\n */\n\nhelpers.round = function(value) {\n  return Math.round(value);\n};\n\n/**\n * Returns the sum of all numbers in the given array.\n *\n * ```handlebars\n * {{sum \"[1, 2, 3, 4, 5]\"}}\n * //=> '15'\n * ```\n *\n * @name .sum\n * @param {Array} `array` Array of numbers to add up.\n * @return {Number}\n * @api public\n */\n\nhelpers.sum = function() {\n  var args = utils.flatten([].concat.apply([], arguments));\n  var i = args.length, sum = 0;\n  while (i--) {\n    if (!utils.isNumber(args[i])) {\n      continue;\n    }\n    sum += (+args[i]);\n  }\n  return sum;\n};\n\n/**\n * Returns the average of all numbers in the given array.\n *\n * ```handlebars\n * {{avg \"[1, 2, 3, 4, 5]\"}}\n * //=> '3'\n * ```\n *\n * @name .avg\n * @param {Array} `array` Array of numbers to add up.\n * @return {Number}\n * @api public\n */\n\nhelpers.avg = function() {\n  var args = utils.flatten([].concat.apply([], arguments));\n  // remove handlebars options object\n  args.pop();\n  return exports.sum(args) / args.length;\n};\n","/home/travis/build/npmtest/node-npmtest-handlebars-helpers/node_modules/handlebars-helpers/lib/misc.js":"'use strict';\n\nvar utils = require('./utils');\n\n/**\n * Expose `helpers`\n */\n\nvar helpers = module.exports;\n\n/**\n * Returns the first value if defined, otherwise the \"default\" value is returned.\n *\n * @param {any} `value`\n * @param {any} `defaultValue`\n * @return {String}\n * @alias .or\n * @api public\n */\n\nhelpers.default = function(value, defaultValue) {\n  return value == null\n    ? defaultValue\n    : value;\n};\n\n/**\n * Return the given value of `prop` from `this.options`. Given the context `{options: {a: {b: {c: 'ddd'}}}}`\n *\n * ```handlebars\n * {{option \"a.b.c\"}}\n * <!-- results => `ddd` -->\n * ```\n *\n * @param {String} `prop`\n * @return {any}\n * @api public\n */\n\nhelpers.option = function(prop) {\n  var opts = (this && this.options) || {};\n  return utils.get(opts, prop);\n};\n\n/**\n * Block helper that renders the block without taking any arguments.\n *\n * @param {Object} `options`\n * @return {String}\n * @block\n * @api public\n */\n\nhelpers.noop = function(options) {\n  return options.fn(this);\n};\n\n/**\n * Block helper that builds the context for the block\n * from the options hash.\n *\n * @param {Object} `options` Handlebars provided options object.\n * @contributor Vladimir Kuznetsov <https://github.com/mistakster>\n * @block\n * @api public\n */\n\nhelpers.withHash = function(options) {\n  if (options.hash && Object.keys(options.hash).length) {\n    return options.fn(options.hash);\n  } else {\n    return options.inverse(this);\n  }\n};\n","/home/travis/build/npmtest/node-npmtest-handlebars-helpers/node_modules/handlebars-helpers/lib/number.js":"'use strict';\n\nvar utils = require('./utils');\n\n/**\n * Expose `helpers`\n */\n\nvar helpers = module.exports;\n\n/**\n * Add commas to numbers\n *\n * @param {Number} `num`\n * @return {Number}\n * @api public\n */\n\nhelpers.addCommas = function(num) {\n  return num.toString().replace(/(\\d)(?=(\\d\\d\\d)+(?!\\d))/g, '$1,');\n};\n\n/**\n * Convert a string or number to a formatted phone number.\n *\n * @param  {Number|String} `num` The phone number to format, e.g. `8005551212`\n * @return {Number} Formatted phone number: `(800) 555-1212`\n * @source http://bit.ly/QlPmPr\n * @api public\n */\n\nhelpers.phoneNumber = function(num) {\n  num = num.toString();\n\n  return '(' + num.substr(0, 3) + ') '\n    + num.substr(3, 3) + '-'\n    + num.substr(6, 4);\n};\n\n/**\n * Generate a random number between two values\n *\n * @param  {Number} `min`\n * @param  {Number} `max`\n * @contributor Tim Douglas <https://github.com/timdouglas>\n * @return {String}\n * @api public\n */\n\nhelpers.random = function(min, max) {\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n};\n\n/**\n * Abbreviate numbers to the given number of `precision`. This is for\n * general numbers, not size in bytes.\n *\n * @param  {Number} `number`\n * @param  {Number} `precision`\n * @return {String}\n * @api public\n */\n\nhelpers.toAbbr = function(number, precision) {\n  if (!utils.isNumber(number)) {\n    number = 0;\n  }\n  if (utils.isUndefined(precision)) {\n    precision = 2;\n  }\n\n  number = +number;\n  // 2 decimal places => 100, 3 => 1000, etc.\n  precision = Math.pow(10, precision);\n  var abbr = ['k', 'm', 'b', 't', 'q'];\n  var len = abbr.length - 1;\n\n  while (len >= 0) {\n    var size = Math.pow(10, (len + 1) * 3);\n    if (size <= (number + 1)) {\n      number = Math.round(number * precision / size) / precision;\n      number += abbr[len];\n      break;\n    }\n    len--;\n  }\n  return number;\n};\n\n/**\n * Returns a string representing the given number in exponential notation.\n *\n * ```js\n * {{toExponential number digits}};\n * ```\n * @param {Number} `number`\n * @param {Number} `fractionDigits` Optional. An integer specifying the number of digits to use after the decimal point. Defaults to as many digits as necessary to specify the number.\n * @return {Number}\n * @api public\n */\n\nhelpers.toExponential = function(number, digits) {\n  if (!utils.isNumber(number)) {\n    number = 0;\n  }\n  if (utils.isUndefined(digits)) {\n    digits = 0;\n  }\n  number = +number;\n  return number.toExponential(digits);\n};\n\n/**\n * Formats the given number using fixed-point notation.\n *\n * @param {Number} `number`\n * @param {Number} `digits` Optional. The number of digits to use after the decimal point; this may be a value between 0 and 20, inclusive, and implementations may optionally support a larger range of values. If this argument is omitted, it is treated as 0.\n * @return {Number}\n * @api public\n */\n\nhelpers.toFixed = function(number, digits) {\n  if (!utils.isNumber(number)) {\n    number = 0;\n  }\n  if (utils.isUndefined(digits)) {\n    digits = 0;\n  }\n  number = +number;\n  return number.toFixed(digits);\n};\n\n/**\n * @param {Number} `number`\n * @return {Number}\n * @api public\n */\n\nhelpers.toFloat = function(number) {\n  return parseFloat(number);\n};\n\n/**\n * @param {Number} `number`\n * @return {Number}\n * @api public\n */\n\nhelpers.toInt = function(number) {\n  return parseInt(number, 10);\n};\n\n/**\n * @param {Number} `number`\n * @param {Number} `precision` Optional. The number of significant digits.\n * @return {Number}\n * @api public\n */\n\nhelpers.toPrecision = function(number, precision) {\n  if (!utils.isNumber(number)) {\n    number = 0;\n  }\n  if (utils.isUndefined(precision)) {\n    precision = 1;\n  }\n  number = +number;\n  return number.toPrecision(precision);\n};\n","/home/travis/build/npmtest/node-npmtest-handlebars-helpers/node_modules/handlebars-helpers/lib/path.js":"'use strict';\n\nvar path = require('path');\nvar utils = require('./utils');\n\n/**\n * Expose `helpers`\n */\n\nvar helpers = module.exports;\n\n/**\n * Get the directory path segment from the given `filepath`.\n *\n * ```handlebars\n * {{absolute \"docs/toc.md\"}}\n * //=> 'docs'\n * ```\n * @param {String} `ext`\n * @return {String}\n * @api public\n */\n\nhelpers.absolute = function(filepath, options) {\n  var context = utils.merge({}, this, options);\n  var ctx = utils.merge({}, context.root, context, context._parent, context.hash);\n  var cwd = ctx.cwd || process.cwd();\n  return path.resolve(cwd, filepath);\n};\n\n/**\n * Get the directory path segment from the given `filepath`.\n *\n * ```handlebars\n * {{dirname \"docs/toc.md\"}}\n * //=> 'docs'\n * ```\n * @param {String} `ext`\n * @return {String}\n * @api public\n */\n\nhelpers.dirname = function(filepath) {\n  return path.dirname(filepath);\n};\n\n/**\n * Get the relative filepath from `a` to `b`.\n *\n * ```handlebars\n * {{relative a b}}\n * ```\n *\n * @param {String} `a`\n * @param {String} `b`\n * @return {String}\n * @api public\n */\n\nhelpers.relative = function(a, b) {\n  return utils.relative(a, b);\n};\n\n/**\n * Get the file extension from the given `filepath`.\n *\n * ```handlebars\n * {{basename \"docs/toc.md\"}}\n * //=> 'toc.md'\n * ```\n * @param {String} `ext`\n * @return {String}\n * @api public\n */\n\nhelpers.basename = function(filepath) {\n  return path.basename(filepath);\n};\n\n/**\n * Get the \"stem\" from the given `filepath`.\n *\n * ```handlebars\n * {{stem \"docs/toc.md\"}}\n * //=> 'toc'\n * ```\n * @param {String} `filepath`\n * @return {String}\n * @api public\n */\n\nhelpers.stem = function(filepath) {\n  return path.basename(filepath, path.extname(filepath));\n};\n\n/**\n * Get the file extension from the given `filepath`.\n *\n * ```handlebars\n * {{extname \"docs/toc.md\"}}\n * //=> '.md'\n * ```\n * @param {String} `filepath`\n * @return {String}\n * @api public\n */\n\nhelpers.extname = function(filepath) {\n  return path.extname(filepath);\n};\n\n/**\n * Get specific (joined) segments of a file path by passing a\n * range of array indices.\n *\n * ```js\n * {{segments \"a/b/c/d\" \"2\" \"3\"}}\n * //=> 'c/d'\n *\n * {{segments \"a/b/c/d\" \"1\" \"3\"}}\n * //=> 'b/c/d'\n *\n * {{segments \"a/b/c/d\" \"1\" \"2\"}}\n * //=> 'b/c'\n * ```\n *\n * @param {String} `filepath` The file path to split into segments.\n * @return {String} Returns a single, joined file path.\n * @api public\n */\n\nhelpers.segments = function(fp, a, b) {\n  return utils.normalize(fp).split('/').slice(a, b).join('/');\n};\n","/home/travis/build/npmtest/node-npmtest-handlebars-helpers/node_modules/handlebars-helpers/lib/url.js":"'use strict';\n\nvar url = require('url');\n\n/**\n * Expose `helpers`\n */\n\nvar helpers = module.exports;\n\n/**\n * Encodes a Uniform Resource Identifier (URI) component\n * by replacing each instance of certain characters by\n * one, two, three, or four escape sequences representing\n * the UTF-8 encoding of the character.\n *\n * @param  {String} `str` The un-encoded string\n * @return {String} The endcoded string\n * @api public\n */\n\nhelpers.encodeURI = function(str) {\n  return encodeURIComponent(str);\n};\n\n/**\n * Decode a Uniform Resource Identifier (URI) component.\n *\n * @param  {String} `str`\n * @return {String}\n * @api public\n */\n\nhelpers.decodeURI = function(str) {\n  return decodeURIComponent(str);\n};\n\n/**\n * Take a base URL, and a href URL, and resolve them as a\n * browser would for an anchor tag.\n *\n * @param  {String} `base`\n * @param  {String} `href`\n * @return {String}\n * @api public\n */\n\nhelpers.urlResolve = function(base, href) {\n  return url.resolve(base, href);\n};\n\n/**\n * Parses a `url` string into an object.\n *\n * @param  {String} `str` URL string\n * @return {String} Returns stringified JSON\n * @api public\n */\n\nhelpers.urlParse = function(str) {\n  return url.parse(str);\n};\n\n/**\n * Strip the query string from a `url`.\n *\n * @name .stripQuerystring\n * @param {String} `url`\n * @return {String} the url without the queryString\n * @api public\n */\n\nhelpers.stripQuerystring = function(url) {\n  return url.split('?')[0];\n};\n\n/**\n * Strip protocol from a `url`.\n *\n * Useful for displaying media that may have an 'http' protocol\n * on secure connections.  Will change 'http://foo.bar to `//foo.bar`\n *\n * @name .stripProtocol\n * @param {String} `str`\n * @return {String} the url with http protocol stripped\n * @api public\n */\n\nhelpers.stripProtocol = function(str) {\n  var parsed = url.parse(str);\n  delete parsed.protocol;\n  return parsed.format();\n};\n"}